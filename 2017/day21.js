'use strict';
const _ = require('underscore');

const art = [
	[false, true, false],
	[false, false, true],
	[true, true, true]
];

let baseKey = {
	"../..": ".../#.#/...",
	"#./..": "..#/..#/#..",
	"##/..": ".../#../..#",
	".#/#.": "#../.../...",
	"##/#.": "#.#/.#./#..",
	"##/##": "..#/#.#/..#",
	".../.../...": ".#../#..#/#.../.#..",
	"#../.../...": "..##/..##/.#.#/....",
	".#./.../...": "..##/..##/.###/##..",
	"##./.../...": "..../.##./#.##/..#.",
	"#.#/.../...": "####/#.##/#.##/#.#.",
	"###/.../...": "#..#/..#./..../##.#",
	".#./#../...": "..#./.#../...#/#.##",
	"##./#../...": "..../#.##/#..#/.#..",
	"..#/#../...": "##.#/####/###./###.",
	"#.#/#../...": "..../#.##/.###/#.#.",
	".##/#../...": "..#./##.#/####/..##",
	"###/#../...": "..#./.##./...#/..#.",
	".../.#./...": ".###/#.../.#../####",
	"#../.#./...": "###./.#.#/#.##/##.#",
	".#./.#./...": "..##/..#./###./..#.",
	"##./.#./...": "#..#/..#./###./...#",
	"#.#/.#./...": "#.../##.#/#.##/#..#",
	"###/.#./...": "...#/#..#/####/##.#",
	".#./##./...": "#.##/#.##/..../#.#.",
	"##./##./...": "..##/###./..#./####",
	"..#/##./...": "..../##../##.#/.##.",
	"#.#/##./...": "##../####/####/.#.#",
	".##/##./...": "..../##.#/.###/##..",
	"###/##./...": ".#../#.#./.#../..##",
	".../#.#/...": "####/#.#./..##/#..#",
	"#../#.#/...": ".#../.#../#..#/....",
	".#./#.#/...": "..##/.##./####/#.#.",
	"##./#.#/...": "..#./###./.#../....",
	"#.#/#.#/...": "..#./..#./...#/#...",
	"###/#.#/...": "###./.#../##../####",
	".../###/...": "#.##/####/####/..##",
	"#../###/...": ".#.#/...#/###./...#",
	".#./###/...": "..../.#.#/.#../....",
	"##./###/...": "...#/.###/..../.##.",
	"#.#/###/...": "..##/###./.#../#..#",
	"###/###/...": ".###/..#./..#./.###",
	"..#/.../#..": ".##./###./####/#.#.",
	"#.#/.../#..": "####/#.../#.../..##",
	".##/.../#..": "###./#..#/..#./.#..",
	"###/.../#..": ".###/.##./#.#./.###",
	".##/#../#..": "##.#/...#/.#.#/...#",
	"###/#../#..": "#.##/..#./..../#..#",
	"..#/.#./#..": "#..#/##.#/.##./####",
	"#.#/.#./#..": "###./..##/#..#/#..#",
	".##/.#./#..": ".#../..../...#/...#",
	"###/.#./#..": ".#../##../.###/..#.",
	".##/##./#..": "##../..##/##../##.#",
	"###/##./#..": "#.##/#..#/.###/####",
	"#../..#/#..": "##.#/####/#.../..##",
	".#./..#/#..": "#..#/..../..../###.",
	"##./..#/#..": "#..#/##.#/##.#/#.#.",
	"#.#/..#/#..": ".###/##.#/####/#...",
	".##/..#/#..": "####/.##./...#/#..#",
	"###/..#/#..": ".#.#/####/##.#/...#",
	"#../#.#/#..": "..##/.##./..##/##..",
	".#./#.#/#..": "#.../##../..##/..#.",
	"##./#.#/#..": "...#/##.#/#..#/.#..",
	"..#/#.#/#..": "#.#./##../#.##/###.",
	"#.#/#.#/#..": "##../##.#/#.#./....",
	".##/#.#/#..": "####/...#/####/.#..",
	"###/#.#/#..": "..../.#../.#../....",
	"#../.##/#..": ".#.#/..#./#..#/.###",
	".#./.##/#..": "#.../.#.#/.###/.##.",
	"##./.##/#..": "#.#./#.#./.#../###.",
	"#.#/.##/#..": "####/##../.##./####",
	".##/.##/#..": "#.../#.#./#.##/###.",
	"###/.##/#..": "####/####/..../####",
	"#../###/#..": "####/.##./...#/##.#",
	".#./###/#..": ".#../#.##/#..#/..##",
	"##./###/#..": "#.#./..##/#.../..##",
	"..#/###/#..": "#.##/.###/#.#./###.",
	"#.#/###/#..": "#.##/#.##/..../#..#",
	".##/###/#..": ".##./#.#./..##/####",
	"###/###/#..": ".##./#..#/#.../###.",
	".#./#.#/.#.": "#.#./#..#/#..#/##.#",
	"##./#.#/.#.": "...#/#.#./##.#/###.",
	"#.#/#.#/.#.": "##.#/..##/##.#/#.##",
	"###/#.#/.#.": ".#.#/..#./##../.##.",
	".#./###/.#.": "#..#/..#./..##/#...",
	"##./###/.#.": "####/.#.#/####/..#.",
	"#.#/###/.#.": "#.#./..##/##../#..#",
	"###/###/.#.": "...#/..../..../#.#.",
	"#.#/..#/##.": "..#./.##./###./.#.#",
	"###/..#/##.": "#.../###./...#/####",
	".##/#.#/##.": "..../..../.###/##..",
	"###/#.#/##.": "##../..../#.#./.##.",
	"#.#/.##/##.": ".#.#/##../..##/#.#.",
	"###/.##/##.": "###./####/...#/.#..",
	".##/###/##.": "..##/#.../..##/.#.#",
	"###/###/##.": "..##/...#/.###/.#..",
	"#.#/.../#.#": "..##/#.../##.#/....",
	"###/.../#.#": "#.##/#..#/..../##..",
	"###/#../#.#": "#.../..../##.#/..#.",
	"#.#/.#./#.#": "###./..##/.#../.##.",
	"###/.#./#.#": "..../#..#/.###/#..#",
	"###/##./#.#": ".#.#/###./##.#/.###",
	"#.#/#.#/#.#": "..../..../.##./#..#",
	"###/#.#/#.#": ".###/.#.#/...#/.###",
	"#.#/###/#.#": ".#.#/##../.#../.#..",
	"###/###/#.#": ".#.#/.##./#.##/....",
	"###/#.#/###": "..#./..#./..#./..##",
	"###/###/###": "##.#/..##/.#.#/...."
};
// baseKey = {
// 	"../.#": "##./#../...",
// 	".#./..#/###": "#..#/..../..../#..#"
// };

// Translation Functions
function strToGrid(str) {
	let rows = str.split('/');
	rows = _.map(rows, r => {
		return r.split('').map(c => c === '#');
	});
	return rows;
}
function gridToStr(grid) {
	return _.map(grid, r => {
		return _.map(r, b => b ? '#' : '.').join('');
	}).join('/');
}

// Transformation Functions
function rotateGridC(grid) {
	const size = grid.length;
	let newGrid = [];
	for (let r = 0; r < size; r++) {
		newGrid[r] = [];
		for (let c = size - 1; c >= 0; c--) {
			newGrid[r].push(grid[c][r]);
		}
	}
	return newGrid;
}
function flipGridH(grid) {
	const newGrid = _.clone(grid);
	_.each(newGrid, r => r.reverse());
	return newGrid;
}
function flipGridV(grid) {
	const newGrid = _.clone(grid);
	newGrid.reverse();
	return newGrid;
}

function flipotateKey(key, value) {
	const gridR0 = strToGrid(key);
	const gridR1 = rotateGridC(gridR0);
	const gridR2 = rotateGridC(gridR1);
	const gridR3 = rotateGridC(gridR2);
	const variants = [
		gridR0,
		flipGridH(gridR0),
		flipGridV(gridR0),
		gridR1,
		flipGridH(gridR1),
		flipGridV(gridR1),
		gridR2,
		flipGridH(gridR2),
		flipGridV(gridR2),
		gridR3,
		flipGridH(gridR3),
		flipGridV(gridR3),
	];
	const keys = {};
	_.each(variants, g => {
		keys[gridToStr(g)] = value;
	});
	return keys;
}

let masterKey = {};

_.each(baseKey, (value, key) => {
	const variants = flipotateKey(key, value);
	masterKey = _.extend(masterKey, variants);
});

function enhance(grid) {
	const even = grid.length % 2 === 0;
	const subSize = even ? 2 : 3;
	const subs = grid.length / subSize;
	const enSize = even ? 3 : 4;
	const enhancedGrid = [];

	for (let r = 0; r < subs; r++) {
		for (let c = 0; c < subs; c++) {
			let sub = [];
			if (subSize === 2) {
				sub[0] = [grid[r*subSize][c*subSize], grid[r*subSize][c*subSize + 1]];
				sub[1] = [grid[r*subSize + 1][c*subSize], grid[r*subSize + 1][c*subSize + 1]];
			} else if (subSize === 3) {
				sub[0] = [grid[r*subSize][c*subSize], grid[r*subSize][c*subSize + 1], grid[r*subSize][c*subSize + 2]];
				sub[1] = [grid[r*subSize + 1][c*subSize], grid[r*subSize + 1][c*subSize + 1], grid[r*subSize + 1][c*subSize + 2]];
				sub[2] = [grid[r*subSize + 2][c*subSize], grid[r*subSize + 2][c*subSize + 1], grid[r*subSize + 2][c*subSize + 2]];
			}
			let enhancedSub = strToGrid(masterKey[gridToStr(sub)]);
			for (let er = 0; er < enSize; er++) {
				if (c === 0) {
					enhancedGrid[r*enSize + er] = enhancedSub[er];
				} else {
					enhancedGrid[r*enSize + er] =  enhancedGrid[r*enSize + er].concat(enhancedSub[er]);
				}
			}
		}
	}
	return enhancedGrid;
}

let enhancedArt = art;
for (let i = 0; i < 18; i++) {
	enhancedArt = enhance(enhancedArt);
}

console.log(_.chain(enhancedArt).flatten().compact().value().length);